<?php

namespace App\Helpers;

use Ramsey\Uuid\Uuid;
use DB;
use Twilio\Rest\Client;
use Carbon\Carbon;
use Auth;
use App\User;
use App\Models\Setting;
use App\Helpers\GeoPlugin;

class SiteHelpers
{
    public static function filterAlphaNumeric($string)
    {
        return trim(preg_replace("/[^a-zA-Z0-9 _-]+/", "", $string));
    }

    public static function filterAlphaNumericWithSanitize($string)
    {
        $string = filter_var($string, FILTER_SANITIZE_STRING, FILTER_FLAG_NO_ENCODE_QUOTES | FILTER_FLAG_STRIP_HIGH | FILTER_FLAG_STRIP_BACKTICK);
        return trim(preg_replace("/[^a-zA-Z0-9@. _-]+/", "", $string));
    }

    public static function filterAlphaNumericForSearch($string)
    {
        return trim(preg_replace("/[^a-zA-Z0-9:| _-]+/", "", $string));
    }

    public static function filterAlpha($string)
    {
        return trim(preg_replace("/[^a-zA-Z _-]+/", "", $string));
    }

    public static function filterNumeric($string)
    {
        return trim(preg_replace("/[^0-9]+/", "", $string));
    }

    public static function filterDate($string)
    {
        return trim(preg_replace("/[^0-9-\/]+/", "", $string));
        //return trim(preg_replace("([^0-9/] | [^0-9-])", "", $string));
    }

    //Genrate Token Url
    public static function generateToken()
    {
        return md5(rand(1, 10) . microtime());
    }

    /*
     * execute a command in background process.
     * @param $command
     */
    public static function execCommandInBackground($cmd)
    {
        if (substr(php_uname(), 0, 7) == "Windows") {
            pclose(popen("start /B " . $cmd, "r"));
        } else {
            exec($cmd . " > /dev/null &");
        }
    }

    /*
     * Function to run queue:work command.
     */
    public static function runQueueWorker($queue = '')
    {
        //set php path
        $php_path = config('constants.PHP_PATH');
        //set artisan path
        $artisan_path = str_replace("\\", "/", base_path() . '/artisan');
        //queue work command
        $worker = 'queue:work --tries=3 --stop-when-empty';
        if ($queue) {
            $worker .= ' --queue=' . $queue;
        }
        //command to run on server
        $cmd = $php_path . ' ' . $artisan_path . ' ' . $worker;
        //send and run command on server in background
        self::execCommandInBackground($cmd);
    }

    public static function sendOtpToUser($phoneCode, $mobile, $otpCode)
    {	
	
        $api_key = config('constants.sms_details.api_key');
        $api_secret = config('constants.sms_details.api_secret');
        $full_mobile = $phoneCode . $mobile;

        $str = "from=XtraClass OTP&text=For Mobile verification use the otp code is $otpCode do not share this with other&to=$full_mobile&api_key=$api_key&api_secret=$api_secret";

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://rest.nexmo.com/sms/json');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        //curl_setopt($ch, CURLOPT_POSTFIELDS, "from=Vonage SMS API&text=Hello from Vonage&to=916375768042&api_key=192d0502&api_secret=0dySQa3utxa67cfU");

        curl_setopt($ch, CURLOPT_POSTFIELDS, $str);

        $headers = array();
        $headers[] = 'Content-Type: application/x-www-form-urlencoded';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        return json_decode($result);
    }

    public static function updateOtp($user_id, $phone_code, $mobile, $otp, $old_mobile_number = '')
    {
        if (isset($old_mobile_number) && !empty($old_mobile_number)) {
            DB::table('mobile_otp')->where('user_id', $user_id)->where('mobile', $old_mobile_number)->delete();
        } else {
            DB::table('mobile_otp')->where('user_id', $user_id)->where('mobile', $mobile)->delete();
        }

        DB::table('mobile_otp')->insert(
                ['user_id' => $user_id, 'country_code' => $phone_code, "mobile" => $mobile, "otp" => $otp]
        );

        /* 	if($otp_exists > 0) {
          DB::table('mobile_otp')
          ->where('user_id', $user_id)
          ->where('mobile', $mobile)
          ->update(["otp"=>$otp]);
          } else {
          DB::table('mobile_otp')->insert(
          ['user_id' => $user_id, 'country_code' => $phone_code,"mobile"=>$mobile,"otp"=>$otp]
          );
          } */
    }

    public static function updateUUID($table)
    {
        $records = DB::table($table)->get();

        foreach ($records as $m) {
            DB::table($table)->where('id', '=', $m->id)->update(['uuid' => Uuid::uuid4()->toString()]);
        }
    }

    public static function getVimeoVideoData($video_url)
    {   
        if($video_url){
            //$video_url = 'https://vimeo.com/414573663/4728216696';
            $jsonurl = 'https://vimeo.com/api/oembed.json?url='.$video_url;
            
            $client = new \GuzzleHttp\Client();
            
            try{
                $response = $client->get($jsonurl);

                if($response->getStatusCode() == 200){
                    $data = json_decode($response->getBody());

                    return $data;
                }
            } catch (\Exception $e) {
                return null;
            }
            
        }
        
        return null;
    }
	
    /*
     * Function returning total resource count for the dashboard.
     */
    public static function dashboard_resource_count($table, $school_id = '')
    {
        $query = DB::table($table)->where('deleted_at', NULL);
		
		if(isset($school_id) && !empty($school_id)) {
			if($table == 'schools') {
			$query = $query->where('id', $school_id);
			}
			else if($table == 'classes') {
			$courses = DB::table('courses')->where('school_id', $school_id)->pluck('id')->toArray();
			$query = $query->whereIn('course_id', $courses);
			}
			else {
			$query = $query->where('school_id', $school_id);
			}
		}
		
		$records_count = $query->count();

        return $records_count;
    }
        
    /*
     * Send verification message to usr mobile number using Twilio API.
     * @param Int $user_id
     * @param Int $phone_code
     * @param Int $mobile
     * 
     * @return String
     */
    public static function sendOtpUsingTwilio($user_id, $phone_code, $mobile)
    {
        //Set configuration variables
        $sid    = config('constants.TWILIO.SID');
        $token  = config('constants.TWILIO.TOKEN');
        $service_sid = config('constants.TWILIO.SERVICE_SID');
        try {
            //Create Twilio client
            $twilio = new Client($sid, $token);
            $full_mobile = "+" . $phone_code . $mobile;
            //Send verification message
            $verification = $twilio->verify->v2->services($service_sid)
                                       ->verifications
                                       ->create($full_mobile, "sms");
            if($verification->sid != '') {
                $sid = $verification->sid;
                DB::table('mobile_verifications')->insert(
                    ['user_id' => $user_id, 'country_code' => $phone_code, "mobile" => $mobile, "vsid" => $sid]
                );
                return $sid;
            }   
        } catch (\Twilio\Exceptions\RestException $e) {
            //echo $e->getMessage();
        }               
        
        return '';
    }
    
    /*
     * Verify OTP code using Twilio API.
     * @param Int $user_id
     * @param String $sid
     * @param Int $code
     * 
     * @return Boolean
     */
    public static function verifyOtpUsingTwilio($vsid, $code)
    {
        //Set configuration variables
        $sid    = config('constants.TWILIO.SID');
        $token  = config('constants.TWILIO.TOKEN');
        $service_sid = config('constants.TWILIO.SERVICE_SID');
        try {
            //Create Twilio client
            $twilio = new Client($sid, $token);

            //Verify verification code
            $verification_check = $twilio->verify->v2->services($service_sid)
                                       ->verificationChecks
                                       ->create($code, ["verificationSid" => $vsid]);

            //The status of the verification. Can be: pending, approved, or denied.
            return $verification_check->status;
            
        } catch (\Twilio\Exceptions\RestException $e) {
            //echo $e->getMessage();
        }
        
        return "Invalid code or expired";
    }
	
	public static function createdAtdiffInMinutes($createdAt){
		
		
		$now = Carbon::now();
		/* $time = Carbon::parse($createdAt)->addMinutes(config('constants.OTP_TIME_LEFT')); */
		$created_at = Carbon::parse($createdAt);
	 
	    $diffMinutes = $created_at->diffInMinutes($now);
	    $diffSec = $created_at->diffInSeconds($now);
		//Config::get('constants.OTP_TIME_LEFT')
		
		//$defined    = Carbon::parse("0000:00:00 00:".config('constants.OTP_TIME_LEFT'));
		//echo $definedSec = $created_at->diffInSeconds($defined); exit;
		
		$minutes = gmdate("i:s", $diffSec);
		$check = self::validOtpTime($minutes);
		
		if($check){
			return gmdate("i:s", 600-$diffSec);
		}else{
			
			return '00:00';
		}
	}
	
	public static function validOtpTime($minutes = '00:00'){
		/* minutes formate is 10 */
		
		$satrt = "00:".config('constants.OTP_TIME_LEFT');
		$end   = "00:".$minutes;
		
		if((date("0000-00-00 h:i:s",strtotime("0000-00-00 ".$satrt))) >= date("0000-00-00 h:i:s",strtotime("0000-00-00 ".$end))){
			return 1;
		}else{ 
			return  0;
		}
	}
	
	 public static function getUserForActive()
    {
			$sessionUser = (object) array();
			$userRole = "student";
			$diffMinutes  = '00:00';
        
			$sessionUser = User::find(Auth::user()->id);
			$userRole = $sessionUser->userRole->role->slug;
			$otpdetails = DB::table("mobile_verifications")
									->where('user_id', Auth::user()->id)
									->orderBy('id','desc')->first();
									
			if(!empty($otpdetails->id)){
					$diffMinutes = self::createdAtdiffInMinutes($otpdetails->created_at);
			}
                
            $geoplugin_country_name = GeoPlugin::locate();

            if (empty($geoplugin_country_name)) {

                $country_details = DB::table("countries")->where('name', $geoplugin_country_name)->select('phonecode', 'name')->first();

                if (!isset($country_details->phonecode) && empty($country_details->phonecode)) {
                    $country_details = DB::table("countries")->where('phonecode', 233)->select('phonecode', 'name')->first();
                }
            } else {
                $country_details = DB::table("countries")->where('phonecode', 233)->select('phonecode', 'name')->first();
            }

       return (object) array(
						'country_details' => $country_details,
						'geoplugin_country_name' => $geoplugin_country_name, 
						'sessionUser' => $sessionUser,
						'userRole' => $userRole,
						'diffMinutes' => $diffMinutes
						);
    }
	
	public static function emailVerified(){
		
		if(Auth::check()){
			$user = User::find(Auth::user()->id);
			
			if(empty($user->mobile_verified_at)){
				return 1;
			}else{
				return 0;
			}
		} else {
			
			return 0;
		}
		
		
	}
        
    public static function generateAvators()
    {
        $avators = [
            'barack-obama.png',
            'cristiano-ronaldo.png',
            'dave-grohl.png',
            'girl-in-ballcap.png',
            'icon-009.png',
            'icon-012.png',
            'icon-022.png',
            'icon-025.png',
            'icon-026.png',
            'icon-032.png',
            'icon-035.png',
            'icon-052.png',
            'icon-136.png',
            'indian-woman.png',
            'joseph-stalin.png',
            'luis-suarez.png',
            'mahatma-gandhi.png',
            'malcolm-x.png',
            'muslim-woman.png',
            'native-man.png',
            'robot-03.png',
            'traditional-african-man.png',
            'traditional-african-woman.png',
            'trinity.png' 
        ];

        foreach ($avators as $a) {
            $name = explode('.',$a)[0];
            $avator = new \App\Models\Avatar;
            $avator->avatar_name = $name;   
            $avator->file_url = 'images/avatar/'.$a;         
            $avator->icon = 'images/avatar/small/'.$a;
            $avator->uuid = Uuid::uuid4()->toString(); 
            $avator->status = 1;  
            $avator->save();
        }
    }
    
    public static function pageLimit()
    {
        $limit = 10;
        
        $setting = Setting::where('key_name','records_per_page')->first(); 
        
        if(isset($setting->val) && $setting->val > 0) {
            $limit = $setting->val;
        }

        return $limit;
    }
}
